what do we not need in a programming language

each succession of programmign languages, from assembly, to c, to python, has abstracted away 2 things, memory, and compelpxity. In assembly we deal with registers, in C we malloc, in Python, we dont care.

Some languages are application specific. But generally, anything that you can do in one language, you can do in another language. The only thing that changes is the amount of control that you have over memory and operations. Consider the example of the "contains" relationship. In java:

public static boolean contains(int[] arr, int value) {
      for (int i = 0; i < arr.length; i++)
         if (arr[i] == value)
            return true;

      return false;
   }

In Python:

def contains(arr, val):
	return val in arr

Are there some things that we do not need to control? Do we ever need to use the iteration. This is huge for programability and reducing errors. We delegate memory and fuctionality of iteration to the programming language, and therefore, we deterministically know what an abstracted function will always do. Consider the other example: Check how many times the number 505 appears in the integer 85930845050593025054. Java, iterate by moding 1000 each time and comparing to 505, then divide by 10. Python: str(integer).count("505")

No class declaration, no return type, no data type specification, no loops, no counters, no variables, no boolean handling, just a return operation. the keywork "in" takes care of an iterable type. Performance is an afterthought, Its not really that much slower. Complexisty is taken away


Lingua Franca
Ray
Rust
Assembly (Risc-V)
C
Java
Python

complexities in programming languages: multithreading, file io, atomicity, race conditions, deadlock, 